# Базовые типы данных:
# int - целочисленные: 4, 5, 9, 23443, 0, -34543, -4
# float - дробные: 5.0, 1.66, 51.32, -6.0, -69.0043, 0
# str - строка: "2342", "dfe233", "ауа32рп", '3', 'fdsfr', "e"
# bool - логические значения: True, False

# В питоне не надо самому указывать тип переменных, компьютер определяет его сам
x = 5
y = 6.0
z = "dff"
v = '3'
b = True
print(type(x), type(y), type(z), type(v), type(b))  # функция type позволяет узнать тип объекта

# операции, которые можно выполнять с базовыми типами
xx = x + 6  # 11
xx = x - 2  # 3
xx = x * 4  # 20
xx = x / 2  # 2.5 тип автоматически сменился на float, не смотря на то, что у x тип данных int
xx = x / 2  # 1.0 даже если деление получается целочисленным, результат операция деления всегда float
xx = x % 3  # 2
xx = 3.5 // 2  # 2
xx = x ** 3  # 125

# упрощенные операции, которые можно выполнять с базовыми типами
xx = 0
xx += x  # 5
xx -= 2  # 3
xx *= 4  # 12
xx /= 1.5  # 8.0
xx %= 9  # 8.0
xx //= 6  # 1.0
xx **= 2  # 1.0
# Как можно заметить из примеров, если работа происходит одновременно с типами int и float, предпочтение отдается типу float

# Преобразование типов
x = 5
y = 6.053
z = "dff"
v = '3'
b = True
print(int(y), float(x), int(b), int(v), float(v), str(x), str(y), str(x), bool(x), sep = "  ")

# Взаимодействие типов друг с другом
print(x + b, y + b, z * 3, b * 3, b * 0, b * -1.32, b ** 4, sep = " ")

# Вывод
print("Hello world") # вывод в питоне осуществляется с помощью функции print
print("Тело вывода", sep = " ", end = "\n") # В функции print нет обязательных параметров
# Если какой-то из параметров не был задан вручную, он примет значения по умолчанию, которые указаны выше
# sep - это параметр, отвечающий за разделение объектов вывода между собой, по умолчанию это 1 пробел
print(5, "4343", True) # 5 4343 True
print(5, "4343", True, sep = "|") # 5|4343|True
# end - это параметр, отвечающий за окончание вывода
print(5)
print(5)

print(5, end = "")
print(5)

# Работа с несколькими переменными одновременно
x, y = y, x # x = y , y = x
x, y, z, v = 5, y + x, "4344", '11' + v # x = 5, y = y + x, z = "4344", v = 11 + v

# Ввод данных
x = input() # классический ввод, считывает полностью введенную строку, возвращаемый тип данных str
y = input("Здесь можно обратиться к пользователю. Например написат введите число: ")
z = int(input()) # Так как вводимые данные всегда строка, иногда их надо получить в другом типе данных, для этого используем преобразование
v = float(input())
x, y = int(input()), int(input()) # чтобы не писать много строк кода, можно написать ввод нескольких значений через запятую
x, y = map(int, input().split()) # если значения вводятся не в новой строке, а через пробел можно применить такой набор функций

# задачи с информатикса E, H, J, L, M, N, Q, S, T, U, V
# Занятие E, H, J, Q, S
# Дом L, N, T
# Дополнительно M, U, V

# Условный оператор

x, y, z = 5, -6, 1

if x > 0: # Условный оператор. Если условие, написанное до ':' истинно, то выполнится все, что написано после двоиточия с отступом в 4 пробела
    print("X - положительное число")

if x > 0: # внутри каждого блока отступ увеличивается на 4 пробела от того отступа, на катором находится условие,
    # это обязательное условие, благодаря которому программа и другие программисты понимают границы тела условного оператора
    print("X - положительное число")
else: # блок else выполняется всегда, когда не был выболнен ни один из блоков if
    print("X - не является положительным числом")

if x > 0:
    if y > 0:               # x > 0, y > 0
        print("Первая четверть")
    else:                   # x > 0, y < 0
        print("Четвертая четверть")
else:
    if y > 0:               # x < 0, y > 0
        print("Вторая четверть")
    else:                   # x < 0, y < 0
        print("Третья четверть")

if (x > 0 and y > 0):
    print("Первая четверть")
elif (x > 0 and y < 0): # Пример сокращенной записи
    print("Четвертая четверть")
elif (x < 0 and y > 0):
    print("Вторая четверть")
else:  # x < 0, y < 0
    print("Третья четверть")

# логические выражения внутри условного оператора могут состоять из нескольких частей объединенных логическими операторами
# Основные логические операторы: and, or, not
# and является истиной, только когда обе части, которые он объединяет истины
# or является истиной, только когда хотя бы 1 часть из тех, которые он объединяет истина
# not стравится перед одним логическим выражением и меняется истину на ложь, а ложь на истину
# x      y      (x and y)      (x or y)      not x
# False  False  False          False         True
# False  True   False          True          True
# True   False  False          True          False
# True   True   True           True          False

# Соответствие базовых типов логическим значениям
# Любое число, отличное от нуля является истиной, 0 является ложью
# Любая не пустая строка является истиной, пустая строка является ложью
# В то же время, если использовать логичческие значения в качестве чисел, True принимает значение 1, а False принимает значение 0

x = 6
if (x % 2 == 1):
    print("X - нечетное")
else:
    print("X - четное")

# Упрощение
if (x % 2):
    print("X - нечетное")
else:
    print("X - четное")

if not(x % 3): # подробная версия: х % 3 == 0
    print("X делится на 3")

# Логические операции сравнения
# > - больше
# < - меньше
# == - равно
# <= - меньше равно
# >= - больше равно
# != - не равно
# Нельзя сравнивать между собой строки и числа, зато числа и логические значения можно, в таком случае логические значение будут рассматриваться как числа
# Если сравнивать между собой строки, они будут сравнивать в лексикографическом порядке, или по другому посимвольно в алфавитном порядке
# "a" < "b", "aa" < "b", "aaaaaaaaaaa" < "b", "abcde" < "abcdef", "abc" < "abd", 0.5 < True, 5.5 > True, 1 == True, -2 < False

# задачи с информатикса K, L, M, N, Q, R, X
# Занятие L, M, Q, AA
# Дом K, N, R?, AB
# Дополнительно AD, AE

